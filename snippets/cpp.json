{
    "registerMacro": {
        "prefix": "registerMacro",
        "body": [
            "#include \"rclcpp_components/register_node_macro.hpp\"",
            "RCLCPP_COMPONENTS_REGISTER_NODE(${1:/*class_name*/});\n$0"
        ]
    },
    "rclcpp::Publisher": {
		"scope": "cpp",
		"prefix": "publisher_rclcpp",
		"body": "create_publisher<${1:/*msg type*/}>(\"topic_name\", 1);\n$0",
		"description": "rclcpp::Publisher"
	},
    "rclcpp::Subscriber": {
		"scope": "cpp",
		"prefix": "subscriber_rclcpp",
		"body": "create_subscription<${1:/*msg type*/}>(\"${2:topic name}\", 10, std::bind(&${3:T::callback},this,std::placeholders::_1));\n$0",
		"description": "rclcpp::Subscriber"
	},
    "rclcpp::Subscriber(lambda)": {
		"scope": "cpp",
		"prefix": "subscriber_lambda_rclcpp",
		"body": "create_subscription<${1:/*msg type*/}>(\"${2:topic name}\", 10, [this](const ${1:/*msg type*/}::SharedPtr msg) -> void {$0/*do something*/});\n",
		"description": "rclcpp::Subscriber(lambda)"
	},
	"RCLCPP_DEBUG":{
		"scope": "cpp",
		"prefix": "RCLCPP_DEBUG",
		"body": "RCLCPP_DEBUG(get_logger(), \"${1:}\");\n$0",
		"description":"RCLCPP_DEBUG"
	},
	"RCLCPP_INFO":{
		"scope": "cpp",
		"prefix": "RCLCPP_INFO",
		"body": "RCLCPP_INFO(get_logger(), \"${1:}\");\n$0",
		"description":"RCLCPP_INFO"
	},
	"RCLCPP_WARN":{
		"scope": "cpp",
		"prefix": "RCLCPP_WARN",
		"body": "RCLCPP_WARN(get_logger(), \"${1:}\");\n$0",
		"description":"RCLCPP_WARN"
	},
	"RCLCPP_ERROR":{
		"scope": "cpp",
		"prefix": "RCLCPP_ERROR",
		"body": "RCLCPP_ERROR(get_logger(), \"${1:}\");\n$0",
		"description":"RCLCPP_ERROR"
	},
	"RCLCPP_FATAL":{
		"scope": "cpp",
		"prefix": "RCLCPP_FATAL",
		"body": "RCLCPP_FATAL(get_logger(), \"${1:}\");\n$0",
		"description":"RCLCPP_FATAL"
	},
	"declare_parameter":{
		"scope": "cpp",
		"prefix": "declare_parameter",
		"body": "declare_parameter(\"${1:}\", ${2:});\n$0",
		"description":"declare parameter"
	},
	"get_parameter":{
		"scope": "cpp",
		"prefix": "get_parameter",
		"body": "get_parameter(\"${1:}\", ${2:});\n$0",
		"description":"get parameter"
	},
	"declare_get_parameter":{
		"scope": "cpp",
		"prefix": "declare_get_parameter",
		"body": "declare_parameter(\"${1:}\", ${2:});\nget_parameter(\"${1:}\", ${3:});\n$0",
		"description":"declare & get parameter"
	}
}